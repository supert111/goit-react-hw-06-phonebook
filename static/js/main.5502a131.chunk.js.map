{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","redux/contactForm/contactForm-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contactForm/contactForm-reduser.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","payload","name","number","id","shortid","generate","deleteContact","searchByFilter","nameInputId","phoneInputId","ContactForm","state","handleChange","element","target","value","setState","handleSubmit","el","preventDefault","props","onSubmit","className","styles","wrapper","this","htmlFor","input_display","type","pattern","title","required","onChange","button_prime","Component","connect","dispatch","actions","searchFilter","allContacts","filter","caseInsensitive","toLocaleLowerCase","contact","includes","contacts","phoneBook","onDeleteContact","map","nameContact","button","onClick","e","App","handleFilter","container","createReducer","find","toLowerCase","alert","_","combineReducers","persistContactsConfig","key","storage","blacklist","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5502a131.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__3aI_2\",\"input_display\":\"ContactForm_input_display__3Fddy\",\"button_prime\":\"ContactForm_button_prime__1MFY6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__2MP4Z\",\"contact\":\"ContactList_contact__3zXX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__37Jvq\",\"wrapper\":\"App_wrapper__n0k-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_display\":\"Filter_input_display__PBBMF\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contact/Add', ({name, number}) => ({\r\n    payload: {\r\n        name,\r\n        number, \r\n        id: shortid.generate(),\r\n    }\r\n}));\r\nconst deleteContact = createAction('contact/Delete');\r\nconst searchByFilter = createAction('contact/SearchByFilter');\r\n\r\nexport default { addContact, deleteContact, searchByFilter };\r\n\r\n///////////////////////////////////////////////////////////\r\n//redux\r\n\r\n// import types from './contactForm-types';\r\n// import shortid from 'shortid';\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         name,\r\n//         number, \r\n//         id: shortid.generate(),\r\n//     }\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// })\r\n\r\n// const searchByFilter = (value) => ({\r\n//     type: types.SEARCH_BY_FILTER,\r\n//     payload: value,\r\n// })\r\n\r\n// export default { addContact, deleteContact, searchByFilter };\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styles from \"./ContactForm.module.css\";\r\nimport shortid from 'shortid';\r\nimport actions from '../../redux/contactForm/contactForm-actions';\r\n\r\nconst nameInputId = shortid.generate();\r\nconst phoneInputId = shortid.generate();\r\n\r\nclass ContactForm extends Component { \r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n    handleChange = (element) => {\r\n        const { name, value } = element.target;\r\n        this.setState ({ [name]: value }); \r\n    };\r\n\r\n    handleSubmit = (el) => {\r\n        el.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n\r\n   render() {\r\n        return (\r\n            <>\r\n                <form className={styles.wrapper} onSubmit={this.handleSubmit}>\r\n                    <label htmlFor={nameInputId}>Name\r\n                        <input className={styles.input_display}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            id={nameInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <label htmlFor={phoneInputId}>Number\r\n                        <input className={styles.input_display}\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            id={phoneInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <button className={styles.button_prime} type=\"submit\" >Add contact</button>\r\n                </form>            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(actions.addContact( name, number )),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport actions from '../../redux/contactForm/contactForm-actions';\r\n\r\nconst ContactList = ({ phoneBook, onDeleteContact }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {phoneBook.map(nameContact => (\r\n          <li className={styles.contact} key={nameContact.id}>{nameContact.name}: {nameContact.number}\r\n            <button className={styles.button} type=\"button\" onClick={()=>onDeleteContact(nameContact.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  )\r\n};\r\n\r\nContactList.propTypes = {\r\n    phoneBook: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst searchFilter = (allContacts, filter) => {\r\n  const caseInsensitive = filter.toLocaleLowerCase();\r\n        return allContacts.filter(contact => \r\n            contact.name.toLocaleLowerCase().includes(caseInsensitive)\r\n        );\r\n    };\r\n\r\nconst mapStateToProps = ({state: {contacts, filter}}) => ({\r\n  phoneBook: searchFilter(contacts, filter),\r\n    })\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactList);","import React from \"react\";\r\nimport styles from \"./Filter.module.css\"\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contactForm/contactForm-actions';\r\n\r\nconst Filter = ({onChange}) => {\r\n    return (\r\n        <label>Find contacts by name\r\n            <input className={styles.input_display}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(actions.searchByFilter(e.target.value)),\r\n})\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);","import React, { Component } from \"react\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\nimport styles from \"./App.module.css\"\r\n\r\n\r\nclass App extends Component { \r\n    state = {\r\n    };\r\n\r\n    handleFilter = (element) => {\r\n        const { value } = element.target;\r\n        this.setState ({ filter: value });  \r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.wrapper}>\r\n                    <h1>Phonebook</h1>\r\n                    <ContactForm /> \r\n                    <h2>Contacts</h2>\r\n                    <Filter /> \r\n                    <ContactList />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contactForm-actions';\r\n\r\nconst contacts = createReducer([  \r\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n], { [actions.addContact]: (state, { payload }) => {\r\n        const duplicateName = state.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase());\r\n        \r\n        if(duplicateName) {\r\n            alert(`${payload.name} is already in contacts.`);\r\n            return state;\r\n        }\r\n\r\n        if(payload.name === \"\") {\r\n            alert(`Please fill out the form it is empty.`);\r\n            return state;\r\n        }\r\n\r\n        if(payload.number === \"\") {\r\n            alert(`Please fill out the form with your phone number, it is empty.`);\r\n            return state;\r\n        }\r\n\r\n        return [payload, ...state,];\r\n    },\r\n    [actions.deleteContact]: (state, { payload }) => (state.filter(({id}) => id !== payload)),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.searchByFilter]: (_, { payload }) => payload,\r\n})\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n})\r\n\r\n///////////////////////////////////////////////////////////////////\r\n//redux\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import types from './contactForm-types';\r\n\r\n// const contacts = (items = [\r\n    // {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n    // {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n    // {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n    // {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n// ],\r\n//  {type, payload}) => {\r\n//     switch(type) {\r\n//         case types.ADD:\r\n//             const duplicateName = items.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase());\r\n            // if(duplicateName) {\r\n            //     alert(`${payload.name} is already in contacts.`);\r\n            //     return items;\r\n            // }\r\n\r\n            // if(payload.name === \"\") {\r\n            //     alert(`Please fill out the form it is empty.`);\r\n            // }\r\n\r\n            // return [payload, ...items,];\r\n\r\n\r\n//         case types.DELETE:\r\n//             return items.filter(({id}) => id !== payload)\r\n\r\n//         default:\r\n//             return items; \r\n//     }\r\n// };\r\n\r\n// const filter = (items = '', {type, payload}) => {\r\n//     switch(type) {\r\n//         case types.SEARCH_BY_FILTER:\r\n//             return payload;\r\n//         default:\r\n//             return items; \r\n//     } \r\n// };\r\n\r\n// export default combineReducers({\r\n//     contacts,\r\n//     filter,\r\n// })","import { \r\n  persistStore, \r\n  persistReducer, \r\n  // FLUSH,\r\n  // REHYDRATE,\r\n  // PAUSE,\r\n  // PERSIST,\r\n  // PURGE,\r\n  // REGISTER, \r\n} from 'redux-persist';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactReducer from './contactForm/contactForm-reduser';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistContactsConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\nconst middleware = [...getDefaultMiddleware({\r\n  // serializableCheck: {\r\n  //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  // }, \r\n}), logger]\r\n\r\nconst store = configureStore({\r\n  reducer: { state: persistReducer(persistContactsConfig, contactReducer) },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n////////////////////////////////////////////////////////////////////////\r\n//redux\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactReducer from './contactForm/contactForm-reduser';  \r\n\r\n// const rootReducer = combineReducers({\r\n//   state: contactReducer,\r\n// })\r\n\r\n// const persistedState = localStorage.getItem('contacts') \r\n//                      ? JSON.parse(localStorage.getItem('contacts'))\r\n//                      : {};\r\n\r\n// const store = createStore(rootReducer, persistedState, composeWithDevTools(),);\r\n\r\n// store.subscribe(()=>{\r\n//   localStorage.setItem('contacts', JSON.stringify(store.getState()))\r\n// })\r\n                     \r\n// export default store;","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={'loading'} persistor={store.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}